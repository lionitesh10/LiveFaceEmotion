# -*- coding: utf-8 -*-
"""FaceEmotion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BDYDY2kPeJj1qZ3ze-vPPCjyh9BVY1ha
"""

!pip install kaggle

from google.colab import files

files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c emotion-detection-from-facial-expressions

!kaggle datasets download -d ananthu017/emotion-detection-fer

!unzip emotion-detection-fer.zip

import os
import numpy as np
import seaborn as sns
from keras.preprocessing.image import load_img,img_to_array,ImageDataGenerator
import matplotlib.pyplot as plt
from keras.layers import Conv2D,BatchNormalization,Activation,Dropout,Flatten,Dense,MaxPooling2D
from keras.optimizers import Adam
from keras.models import Sequential
from keras.callbacks import ModelCheckpoint

pic_size=48
plt.figure(0,figsize=(12,20))
cpt=0

for expression in os.listdir("/content/train"):
  for i in range(1,6):
    cpt+=1
    plt.subplot(7,5,cpt)
    img=load_img("/content/train/"+expression+"/"+os.listdir("/content/train/"+expression)[i],target_size=(pic_size,pic_size))
    plt.imshow(img,cmap="gray")
plt.tight_layout()
plt.show()

for expression in os.listdir("/content/train"):
  print(str(len(os.listdir("/content/train/"+expression)))+" "+expression+" images")

datagen_train=ImageDataGenerator()
datagen_validation=ImageDataGenerator()

batch_size=128

train_gen=datagen_train.flow_from_directory(
    "/content/train/",
    target_size=(pic_size,pic_size),
    color_mode='grayscale',
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=True
)

validation_gen=datagen_validation.flow_from_directory(
    "/content/test/",
    target_size=(pic_size,pic_size),
    color_mode='grayscale',
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=False
)

nb_classes=7

model=Sequential()

model.add(Conv2D(64,(3,3),padding='same',input_shape=(48,48,1)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(128,(5,5),padding='same'))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(512,(3,3),padding='same'))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(512,(3,3),padding='same'))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(256))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.25))

model.add(Dense(256))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.25))

model.add(Dense(nb_classes,activation='softmax'))

opt=Adam(learning_rate=0.001)

model.compile(optimizer=opt,loss='categorical_crossentropy',metrics=['accuracy'])

checkpoint_cb=ModelCheckpoint("FaceEmotionModel.h5",save_best_only=True)

model.summary()

# Commented out IPython magic to ensure Python compatibility.
# #Train Section
# %%time
# epochs=50
# history=model.fit_generator(
#     generator=train_gen,
#     steps_per_epoch=train_gen.n//train_gen.batch_size,
#     epochs=epochs,
#     validation_data=validation_gen,
#     validation_steps=validation_gen.n//validation_gen.batch_size,
#     callbacks=[checkpoint_cb]
# )

import pandas as pd
pd.DataFrame(history.history).plot()

type(history)

